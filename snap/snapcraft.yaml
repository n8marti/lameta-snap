name: lameta-unofficial
title: laMETA
version: "v2.0.19-beta"
# version: "v2.1.2-alpha"
# base: core18 # highest available for nodejs/yarn plugin
base: core22 # for npm plugin
summary: Lameta is a metadata tool to help with organising collections of files.
description: |
  Lameta is mainly aimed at collections made in the course of documenting language, music, and other cultural expressions.

  Lameta greatly simplifies management of collections and makes the archiving process straightforward and painless for field workers. 

  Hatton, John, Gary Holton, Mandana Seyfeddinipur, Nick Thieberger. 2021. Lameta [software] https://github.com/onset/laMETA/releases
grade: devel
confinement: devmode
architectures:
  - amd64
apps:
  lameta-unofficial:
    # extensions: [gnome-3-34] # core18
    extensions: [gnome] # core22
    command: lameta
    plugs:
      - audio-playback
      - home
      - network
      - udisks2

parts:
  lameta:
    source: https://github.com/onset/lameta/archive/refs/tags/${SNAPCRAFT_PROJECT_VERSION}.tar.gz

    # For core18 (but doesn't install correct node version).
    # plugin: nodejs
    # Node version from package.json: engines.node
    # nodejs-version: '16.20.0'
    # nodejs-yarn-version: v1.22.19 # from .yarnrc; needs 'v' in front to work

    # For core22
    # ref: https://github.com/alexmurray/vscode-html-languageserver-snap/blob/2541b13917ce664cf6e6bbbdfe27897416909657/snapcraft.yaml#L18
    plugin: npm
    build-environment:
      - ARCH: "x64" # consider also "arm64"
      - NODE_ENV: "production"
      - NODEJS_FIXED_VERSION: "v16.20.0"
      - YARN_FIXED_VERSION: "v1.22.19"
    npm-include-node: true
    npm-node-version: $NODEJS_FIXED_VERSION
    override-build: |
      # Install correct version of node.
      curl -s https://nodejs.org/dist/"${NODEJS_FIXED_VERSION}"/node-"${NODEJS_FIXED_VERSION}"-linux-$ARCH.tar.gz \
        | tar xzf - -C "$SNAPCRAFT_PART_INSTALL" --strip-components=1
      # Ignore (rename) .yarnrc & .yarnrc.yml to force use of downloaded version of yarn.
      mv .yarnrc{,.bak}
      # NOTE: Relying on build system memory limit instead of the following.
      # Limit memory use if system has limited RAM.
      mem_tot=$(free -m | grep Mem | awk '{print $2}')
      if [[ $(free -m | grep ^Mem | awk '{print $2}') -lt 1000 ]]; then
        export NODE_OPTIONS='--heapsnapshot-near-heap-limit=1 --max-old-space-size=200 --max-semi-space-size=1'
      fi
      mv .yarnrc.yml{,.bak}
      # Install yarn.
      npm install --location=global yarn@$YARN_FIXED_VERSION
      node -v
      npm -v
      yarn -v
      # yarn install
      npm install --legacy-peer-deps --omit=dev --omit=optional # also try --force b/c of dependency disagreements
      yarn package-linux

